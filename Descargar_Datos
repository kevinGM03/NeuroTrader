import os
import requests
import pandas as pd
from zipfile import ZipFile
from io import BytesIO
from datetime import datetime

# Configuración de la carpeta de destino
output_folder = r'/content/drive/My Drive/PROYECTO/DATOS HISTORICOS'
if not os.path.exists(output_folder):
  os.makedirs(output_folder)

if os.path.exists(output_folder):
    print(f"La carpeta de destino existe: {output_folder}")

    # Fechas de inicio y configuración
    start_year = 2021
    start_month = 1
    end_year = datetime.now().year
    end_month = datetime.now().month
    end_day = datetime.now().day - 1  # Hasta el día anterior al actual
    symbol = 'BTCUSDT'
    interval = '1m'

    # URL base para datos de Binance en la ruta mensual y diaria
    monthly_base_url = 'https://data.binance.vision/data/spot/monthly/klines'
    daily_base_url = 'https://data.binance.vision/data/spot/daily/klines'

    def download_monthly_data(year, month):
        month_str = str(month).zfill(2)
        file_name = f"{symbol}-{interval}-{year}-{month_str}.zip"
        file_url = f"{monthly_base_url}/{symbol}/{interval}/{file_name}"

        yearly_folder = os.path.join(output_folder, f'{year}')
        if not os.path.exists(yearly_folder):
            os.makedirs(yearly_folder)

        output_file = os.path.join(yearly_folder, f'{symbol}_data_{year}_{month_str}.csv')

        # Evitar descarga si el archivo ya existe
        if os.path.exists(output_file):
            print(f"{output_file} ya existe. Saltando descarga del mes completo.")
            return

        # Descargar y guardar archivo mensual
        try:
            print(f"Descargando archivo mensual {file_name} desde {file_url}")
            response = requests.get(file_url, stream=True)
            if response.status_code == 404:
                print(f"Archivo {file_name} no encontrado. Saltando.")
                return

            with ZipFile(BytesIO(response.content)) as thezip:
                csv_file_name = thezip.namelist()[0]
                with thezip.open(csv_file_name) as thefile:
                    df = pd.read_csv(thefile, header=None, names=[
                        'timestamp', 'open', 'high', 'low', 'close', 'volume',
                        'close_time', 'quote_asset_volume', 'number_of_trades',
                        'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                    ])
                    df.to_csv(output_file, index=False)
                    print(f"Datos de {year}-{month_str} guardados en {output_file}")
        except requests.exceptions.RequestException as e:
            print(f"Error al descargar {file_name}: {e}")

    def download_daily_data(year, month, day):
        month_str = str(month).zfill(2)
        day_str = str(day).zfill(2)
        file_name = f"{symbol}-{interval}-{year}-{month_str}-{day_str}.zip"
        file_url = f"{daily_base_url}/{symbol}/{interval}/{file_name}"

        daily_folder = os.path.join(output_folder, f'{year}')
        if not os.path.exists(daily_folder):
            os.makedirs(daily_folder)

        output_file = os.path.join(daily_folder, f'{symbol}_data_{year}_{month_str}_{day_str}.csv')

        # Evitar descarga si el archivo ya existe
        if os.path.exists(output_file):
            print(f"{output_file} ya existe. Saltando descarga del día.")
            return

        # Descargar y guardar archivo diario
        try:
            print(f"Descargando archivo diario {file_name} desde {file_url}")
            response = requests.get(file_url, stream=True)
            if response.status_code == 404:
                print(f"Archivo {file_name} no encontrado. Saltando.")
                return

            with ZipFile(BytesIO(response.content)) as thezip:
                csv_file_name = thezip.namelist()[0]
                with thezip.open(csv_file_name) as thefile:
                    df = pd.read_csv(thefile, header=None, names=[
                        'timestamp', 'open', 'high', 'low', 'close', 'volume',
                        'close_time', 'quote_asset_volume', 'number_of_trades',
                        'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                    ])
                    df.to_csv(output_file, index=False)
                    print(f"Datos de {year}-{month_str}-{day_str} guardados en {output_file}")
        except requests.exceptions.RequestException as e:
            print(f"Error al descargar {file_name}: {e}")

    # Descargar datos mensuales para cada mes hasta el mes actual
    for year in range(start_year, end_year + 1):
        first_month = start_month if year == start_year else 1
        last_month = end_month if year == end_year else 12

        for month in range(first_month, last_month + 1):
            download_monthly_data(year, month)

    # Descargar datos diarios para el mes actual, hasta el día anterior al actual
    for day in range(1, end_day + 1):
        download_daily_data(end_year, end_month, day)

    print("Descarga completa.")
else:
    print(f"Error: La carpeta de destino no se encuentra en {output_folder}")
